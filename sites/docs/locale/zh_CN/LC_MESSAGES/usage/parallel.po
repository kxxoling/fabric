# 
msgid ""
msgstr ""
"Project-Id-Version: Fabric\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../usage/parallel.rst:3
msgid "Parallel execution"
msgstr "并行执行"

#: ../usage/parallel.rst:9
msgid ""
"By default, Fabric executes all specified tasks **serially** (see :ref"
":`execution-strategy` for details.) This document describes Fabric's options"
" for running tasks on multiple hosts in **parallel**, via per-task "
"decorators and/or global command-line switches."
msgstr ""

#: ../usage/parallel.rst:16
msgid "What it does"
msgstr ""

#: ../usage/parallel.rst:18
msgid ""
"Because Fabric 1.x is not fully threadsafe (and because in general use, task"
" functions do not typically interact with one another) this functionality is"
" implemented via the Python `multiprocessing "
"<http://docs.python.org/library/multiprocessing.html>`_ module. It creates "
"one new process for each host and task combination, optionally using a "
"(configurable) sliding window to prevent too many processes from running at "
"the same time."
msgstr ""

#: ../usage/parallel.rst:26
msgid ""
"For example, imagine a scenario where you want to update Web application "
"code on a number of Web servers, and then reload the servers once the code "
"has been distributed everywhere (to allow for easier rollback if code "
"updates fail.) One could implement this with the following fabfile::"
msgstr ""

#: ../usage/parallel.rst:40
msgid "and execute it on a set of 3 servers, in serial, like so::"
msgstr ""

#: ../usage/parallel.rst:44
msgid ""
"Normally, without any parallel execution options activated, Fabric would run"
" in order:"
msgstr ""

#: ../usage/parallel.rst:47
msgid "``update`` on ``web1``"
msgstr ""

#: ../usage/parallel.rst:48
msgid "``update`` on ``web2``"
msgstr ""

#: ../usage/parallel.rst:49
msgid "``update`` on ``web3``"
msgstr ""

#: ../usage/parallel.rst:50
msgid "``reload`` on ``web1``"
msgstr ""

#: ../usage/parallel.rst:51
msgid "``reload`` on ``web2``"
msgstr ""

#: ../usage/parallel.rst:52
msgid "``reload`` on ``web3``"
msgstr ""

#: ../usage/parallel.rst:54
msgid ""
"With parallel execution activated (via :option:`-P` -- see below for "
"details), this turns into:"
msgstr ""

#: ../usage/parallel.rst:57
msgid "``update`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../usage/parallel.rst:58
msgid "``reload`` on ``web1``, ``web2``, and ``web3``"
msgstr ""

#: ../usage/parallel.rst:60
msgid ""
"Hopefully the benefits of this are obvious -- if ``update`` took 5 seconds "
"to run and ``reload`` took 2 seconds, serial execution takes (5+2)*3 = 21 "
"seconds to run, while parallel execution takes only a third of the time, "
"(5+2) = 7 seconds on average."
msgstr ""

#: ../usage/parallel.rst:67
msgid "How to use it"
msgstr ""

#: ../usage/parallel.rst:70
msgid "Decorators"
msgstr ""

#: ../usage/parallel.rst:72
msgid ""
"Since the minimum \"unit\" that parallel execution affects is a task, the "
"functionality may be enabled or disabled on a task-by-task basis using the "
"`~fabric.decorators.parallel` and `~fabric.decorators.serial` decorators. "
"For example, this fabfile::"
msgstr ""

#: ../usage/parallel.rst:86
msgid "when run in this manner::"
msgstr ""

#: ../usage/parallel.rst:90
msgid "will result in the following execution sequence:"
msgstr ""

#: ../usage/parallel.rst:92
msgid "``runs_in_parallel`` on ``host1``, ``host2``, and ``host3``"
msgstr ""

#: ../usage/parallel.rst:93
msgid "``runs_serially`` on ``host1``"
msgstr ""

#: ../usage/parallel.rst:94
msgid "``runs_serially`` on ``host2``"
msgstr ""

#: ../usage/parallel.rst:95
msgid "``runs_serially`` on ``host3``"
msgstr ""

#: ../usage/parallel.rst:98
msgid "Command-line flags"
msgstr ""

#: ../usage/parallel.rst:100
msgid ""
"One may also force all tasks to run in parallel by using the command-line "
"flag :option:`-P` or the env variable :ref:`env.parallel <env-parallel>`.  "
"However, any task specifically wrapped with `~fabric.decorators.serial` will"
" ignore this setting and continue to run serially."
msgstr ""

#: ../usage/parallel.rst:105
msgid ""
"For example, the following fabfile will result in the same execution "
"sequence as the one above::"
msgstr ""

#: ../usage/parallel.rst:117
msgid "when invoked like so::"
msgstr ""

#: ../usage/parallel.rst:121
msgid ""
"As before, ``runs_in_parallel`` will run in parallel, and ``runs_serially`` "
"in sequence."
msgstr ""

#: ../usage/parallel.rst:126
msgid "Bubble size"
msgstr ""

#: ../usage/parallel.rst:128
msgid ""
"With large host lists, a user's local machine can get overwhelmed by running"
" too many concurrent Fabric processes. Because of this, you may opt to use a"
" moving bubble approach that limits Fabric to a specific number of "
"concurrently active processes."
msgstr ""

#: ../usage/parallel.rst:133
msgid ""
"By default, no bubble is used and all hosts are run in one concurrent pool. "
"You can override this on a per-task level by specifying the ``pool_size`` "
"keyword argument to `~fabric.decorators.parallel`, or globally via "
":option:`-z`."
msgstr ""

#: ../usage/parallel.rst:137
msgid "For example, to run on 5 hosts at a time::"
msgstr ""

#: ../usage/parallel.rst:145
msgid "Or skip the ``pool_size`` kwarg and instead::"
msgstr ""

#: ../usage/parallel.rst:152
msgid "Linewise vs bytewise output"
msgstr ""

#: ../usage/parallel.rst:154
msgid ""
"Fabric's default mode of printing to the terminal is byte-by-byte, in order "
"to support :doc:`/usage/interactivity`. This often gives poor results when "
"running in parallel mode, as the multiple processes may write to your "
"terminal's standard out stream simultaneously."
msgstr ""

#: ../usage/parallel.rst:159
msgid ""
"To help offset this problem, Fabric's option for linewise output is "
"automatically enabled whenever parallelism is active. This will cause you to"
" lose most of the benefits outlined in the above link Fabric's remote "
"interactivity features, but as those do not map well to parallel "
"invocations, it's typically a fair trade."
msgstr ""

#: ../usage/parallel.rst:165
msgid ""
"There's no way to avoid the multiple processes mixing up on a line-by-line "
"basis, but you will at least be able to tell them apart by the host-string "
"line prefix."
msgstr ""

#: ../usage/parallel.rst:170
msgid ""
"Future versions will add improved logging support to make troubleshooting "
"parallel runs easier."
msgstr ""

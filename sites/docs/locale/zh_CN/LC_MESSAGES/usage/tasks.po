# 
msgid ""
msgstr ""
"Project-Id-Version: Fabric\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <kxxoling@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../usage/tasks.rst:3
msgid "Defining tasks"
msgstr "定义任务"

#: ../usage/tasks.rst:5
msgid ""
"As of Fabric 1.1, there are two distinct methods you may use in order to "
"define which objects in your fabfile show up as tasks:"
msgstr "在 Fabric 1.1 中存在两种定义 fabfile 中对象为任务的方式： ::"

#: ../usage/tasks.rst:8
msgid ""
"The \"new\" method starting in 1.1 considers instances of "
"`~fabric.tasks.Task` or its subclasses, and also descends into imported "
"modules to allow building nested namespaces."
msgstr ""
"“从 1.1 版本后支持的新”方法需要是 `~fabric.tasks.Task` 或其子类的实现，"
"and also descends into imported modules to allow building nested namespaces."

#: ../usage/tasks.rst:11
msgid ""
"The \"classic\" method from 1.0 and earlier considers all public callable "
"objects (functions, classes etc) and only considers the objects in the "
"fabfile itself with no recursing into imported module."
msgstr ""

#: ../usage/tasks.rst:16
msgid ""
"These two methods are **mutually exclusive**: if Fabric finds *any* new-"
"style task objects in your fabfile or in modules it imports, it will assume "
"you've committed to this method of task declaration and won't consider any "
"non-`~fabric.tasks.Task` callables. If *no* new-style tasks are found, it "
"reverts to the classic behavior."
msgstr ""

#: ../usage/tasks.rst:22
msgid "The rest of this document explores these two methods in detail."
msgstr "下面的文档将详细探究这两种方法。"

#: ../usage/tasks.rst:26
msgid ""
"To see exactly what tasks in your fabfile may be executed via ``fab``, use "
":option:`fab --list <-l>`."
msgstr ""

#: ../usage/tasks.rst:32
msgid "New-style tasks"
msgstr "新式任务"

#: ../usage/tasks.rst:34
msgid ""
"Fabric 1.1 introduced the `~fabric.tasks.Task` class to facilitate new "
"features and enable some programming best practices, specifically:"
msgstr ""

#: ../usage/tasks.rst:37
msgid ""
"**Object-oriented tasks**. Inheritance and all that comes with it can make "
"for much more sensible code reuse than passing around simple function "
"objects.  The classic style of task declaration didn't entirely rule this "
"out, but it also didn't make it terribly easy."
msgstr ""

#: ../usage/tasks.rst:41
msgid ""
"**Namespaces**. Having an explicit method of declaring tasks makes it easier"
" to set up recursive namespaces without e.g. polluting your task list with "
"the contents of Python's ``os`` module (which would show up as valid "
"\"tasks\" under the classic methodology.)"
msgstr ""

#: ../usage/tasks.rst:46
msgid ""
"With the introduction of `~fabric.tasks.Task`, there are two ways to set up "
"new tasks:"
msgstr "除刚刚介绍的 `~fabric.tasks.Task` 外，还有两种设置新式任务的方式： ::"

#: ../usage/tasks.rst:49
msgid ""
"Decorate a regular module level function with `@task "
"<fabric.decorators.task>`, which transparently wraps the function in a "
"`~fabric.tasks.Task` subclass.  The function name will be used as the task "
"name when invoking."
msgstr ""

#: ../usage/tasks.rst:53
msgid ""
"Subclass `~fabric.tasks.Task` (`~fabric.tasks.Task` itself is intended to be"
" abstract), define a ``run`` method, and instantiate your subclass at module"
" level. Instances' ``name`` attributes are used as the task name; if omitted"
" the instance's variable name will be used instead."
msgstr ""

#: ../usage/tasks.rst:58
msgid ""
"Use of new-style tasks also allows you to set up :ref:`namespaces "
"<namespaces>`."
msgstr "新式任务还允许设置 :ref:`namespaces <namespaces>` 。"

#: ../usage/tasks.rst:65
msgid "The ``@task`` decorator"
msgstr "``@task`` 装饰器"

#: ../usage/tasks.rst:67
msgid ""
"The quickest way to make use of new-style task features is to wrap basic "
"task functions with `@task <fabric.decorators.task>`::"
msgstr ""

#: ../usage/tasks.rst:76
msgid ""
"When this decorator is used, it signals to Fabric that *only* functions "
"wrapped in the decorator are to be loaded up as valid tasks. (When not "
"present, :ref:`classic-style task <classic-tasks>` behavior kicks in.)"
msgstr ""

#: ../usage/tasks.rst:81
msgid "Arguments"
msgstr "参数"

#: ../usage/tasks.rst:83
msgid ""
"`@task <fabric.decorators.task>` may also be called with arguments to "
"customize its behavior. Any arguments not documented below are passed into "
"the constructor of the ``task_class`` being used, with the function itself "
"as the first argument (see :ref:`task-decorator-and-classes` for details.)"
msgstr ""

#: ../usage/tasks.rst:88
msgid ""
"``task_class``: The `~fabric.tasks.Task` subclass used to wrap the decorated"
" function. Defaults to `~fabric.tasks.WrappedCallableTask`."
msgstr ""

#: ../usage/tasks.rst:90
msgid ""
"``aliases``: An iterable of string names which will be used as aliases for "
"the wrapped function. See :ref:`task-aliases` for details."
msgstr ""

#: ../usage/tasks.rst:92
msgid ""
"``alias``: Like ``aliases`` but taking a single string argument instead of "
"an iterable. If both ``alias`` and ``aliases`` are specified, ``aliases`` "
"will take precedence."
msgstr ""

#: ../usage/tasks.rst:95
msgid ""
"``default``: A boolean value determining whether the decorated task also "
"stands in for its containing module as a task name. See :ref:`default-"
"tasks`."
msgstr ""

#: ../usage/tasks.rst:97
msgid ""
"``name``: A string setting the name this task appears as to the command-line"
" interface. Useful for task names that would otherwise shadow Python "
"builtins (which is technically legal but frowned upon and bug-prone.)"
msgstr ""

#: ../usage/tasks.rst:104
msgid "Aliases"
msgstr "别名"

#: ../usage/tasks.rst:106
msgid ""
"Here's a quick example of using the ``alias`` keyword argument to facilitate"
" use of both a longer human-readable task name, and a shorter name which is "
"quicker to type::"
msgstr ""

#: ../usage/tasks.rst:116
msgid ""
"Calling :option:`--list <-l>` on this fabfile would show both the original "
"``deploy_with_migrations`` and its alias ``dwm``::"
msgstr ""

#: ../usage/tasks.rst:125
msgid ""
"When more than one alias for the same function is needed, simply swap in the"
" ``aliases`` kwarg, which takes an iterable of strings instead of a single "
"string."
msgstr ""

#: ../usage/tasks.rst:132
msgid "Default tasks"
msgstr "默认任务"

#: ../usage/tasks.rst:134
msgid ""
"In a similar manner to :ref:`aliases <task-aliases>`, it's sometimes useful "
"to designate a given task within a module as the \"default\" task, which may"
" be called by referencing *just* the module name. This can save typing "
"and/or allow for neater organization when there's a single \"main\" task and"
" a number of related tasks or subroutines."
msgstr ""

#: ../usage/tasks.rst:140
msgid ""
"For example, a ``deploy`` submodule might contain tasks for provisioning new"
" servers, pushing code, migrating databases, and so forth -- but it'd be "
"very convenient to highlight a task as the default \"just deploy\" action. "
"Such a ``deploy.py`` module might look like this::"
msgstr ""

#: ../usage/tasks.rst:166
msgid ""
"With the following task list (assuming a simple top level ``fabfile.py`` "
"that just imports ``deploy``)::"
msgstr ""

#: ../usage/tasks.rst:176
msgid ""
"Calling ``deploy.full_deploy`` on every deploy could get kind of old, or "
"somebody new to the team might not be sure if that's really the right task "
"to run."
msgstr ""

#: ../usage/tasks.rst:178
msgid ""
"Using the ``default`` kwarg to `@task <fabric.decorators.task>`, we can tag "
"e.g. ``full_deploy`` as the default task::"
msgstr ""

#: ../usage/tasks.rst:185
msgid "Doing so updates the task list like so::"
msgstr "这样之后，将任务列表更新成这样： ::"

#: ../usage/tasks.rst:196
msgid ""
"Note that ``full_deploy`` still exists as its own explicit task -- but now "
"``deploy`` shows up as a sort of top level alias for ``full_deploy``."
msgstr ""

#: ../usage/tasks.rst:199
msgid ""
"If multiple tasks within a module have ``default=True`` set, the last one to"
" be loaded (typically the one lowest down in the file) will take precedence."
msgstr ""

#: ../usage/tasks.rst:203
msgid "Top-level default tasks"
msgstr "顶层的默认任务"

#: ../usage/tasks.rst:205
msgid ""
"Using ``@task(default=True)`` in the top level fabfile will cause the "
"denoted task to execute when a user invokes ``fab`` without any task names "
"(similar to e.g. ``make``.) When using this shortcut, it is not possible to "
"specify arguments to the task itself -- use a regular invocation of the task"
" if this is necessary."
msgstr ""

#: ../usage/tasks.rst:214
msgid "``Task`` subclasses"
msgstr "``Task`` 子类"

#: ../usage/tasks.rst:216
msgid ""
"If you're used to :ref:`classic-style tasks <classic-tasks>`, an easy way to"
" think about `~fabric.tasks.Task` subclasses is that their ``run`` method is"
" directly equivalent to a classic task; its arguments are the task arguments"
" (other than ``self``) and its body is what gets executed."
msgstr ""

#: ../usage/tasks.rst:221
msgid "For example, this new-style task::"
msgstr "例如，新式任务会像这样： ::"

#: ../usage/tasks.rst:231
msgid "is exactly equivalent to this function-based task::"
msgstr "和下面这个基于函数的任务作用完全一致： ::"

#: ../usage/tasks.rst:238
msgid ""
"Note how we had to instantiate an instance of our class; that's simply "
"normal Python object-oriented programming at work. While it's a small bit of"
" boilerplate right now -- for example, Fabric doesn't care about the name "
"you give the instantiation, only the instance's ``name`` attribute -- it's "
"well worth the benefit of having the power of classes available."
msgstr ""

#: ../usage/tasks.rst:244
msgid ""
"We plan to extend the API in the future to make this experience a bit "
"smoother."
msgstr ""

#: ../usage/tasks.rst:249
msgid "Using custom subclasses with ``@task``"
msgstr "使用 ``@task`` 定制子类"

#: ../usage/tasks.rst:251
msgid ""
"It's possible to marry custom `~fabric.tasks.Task` subclasses with `@task "
"<fabric.decorators.task>`. This may be useful in cases where your core "
"execution logic doesn't do anything class/object-specific, but you want to "
"take advantage of class metaprogramming or similar techniques."
msgstr ""

#: ../usage/tasks.rst:256
msgid ""
"Specifically, any `~fabric.tasks.Task` subclass which is designed to take in"
" a callable as its first constructor argument (as the built-in "
"`~fabric.tasks.WrappedCallableTask` does) may be specified as the "
"``task_class`` argument to `@task <fabric.decorators.task>`."
msgstr ""

#: ../usage/tasks.rst:261
msgid ""
"Fabric will automatically instantiate a copy of the given class, passing in "
"the wrapped function as the first argument. All other args/kwargs given to "
"the decorator (besides the \"special\" arguments documented in :ref:`task-"
"decorator-arguments`) are added afterwards."
msgstr ""

#: ../usage/tasks.rst:266
msgid "Here's a brief and somewhat contrived example to make this obvious::"
msgstr ""

#: ../usage/tasks.rst:284
msgid ""
"When this fabfile is loaded, a copy of ``CustomTask`` is instantiated, "
"effectively calling::"
msgstr ""

#: ../usage/tasks.rst:288
msgid ""
"Note how the ``alias`` kwarg is stripped out by the decorator itself and "
"never reaches the class instantiation; this is identical in function to how "
":ref:`command-line task arguments <task-arguments>` work."
msgstr ""

#: ../usage/tasks.rst:295
msgid "Namespaces"
msgstr "命名空间（Namespace）"

#: ../usage/tasks.rst:297
msgid ""
"With :ref:`classic tasks <classic-tasks>`, fabfiles were limited to a "
"single, flat set of task names with no real way to organize them.  In Fabric"
" 1.1 and newer, if you declare tasks the new way (via `@task "
"<fabric.decorators.task>` or your own `~fabric.tasks.Task` subclass "
"instances) you may take advantage of **namespacing**:"
msgstr ""

#: ../usage/tasks.rst:303
msgid ""
"Any module objects imported into your fabfile will be recursed into, looking"
" for additional task objects."
msgstr ""

#: ../usage/tasks.rst:305
msgid ""
"Within submodules, you may control which objects are \"exported\" by using "
"the standard Python ``__all__`` module-level variable name (thought they "
"should still be valid new-style task objects.)"
msgstr ""

#: ../usage/tasks.rst:308
msgid ""
"These tasks will be given new dotted-notation names based on the modules "
"they came from, similar to Python's own import syntax."
msgstr ""

#: ../usage/tasks.rst:311
msgid ""
"Let's build up a fabfile package from simple to complex and see how this "
"works."
msgstr ""

#: ../usage/tasks.rst:314
msgid "Basic"
msgstr "基础"

#: ../usage/tasks.rst:316
msgid ""
"We start with a single `__init__.py` containing a few tasks (the Fabric API "
"import omitted for brevity)::"
msgstr ""

#: ../usage/tasks.rst:327
msgid "The output of ``fab --list`` would look something like this::"
msgstr "``fab --list`` 的输出会像这样： ::"

#: ../usage/tasks.rst:332
msgid ""
"There's just one namespace here: the \"root\" or global namespace. Looks "
"simple now, but in a real-world fabfile with dozens of tasks, it can get "
"difficult to manage."
msgstr ""

#: ../usage/tasks.rst:337
msgid "Importing a submodule"
msgstr "引用子目录"

#: ../usage/tasks.rst:339
msgid ""
"As mentioned above, Fabric will examine any imported module objects for "
"tasks, regardless of where that module exists on your Python import path.  "
"For now we just want to include our own, \"nearby\" tasks, so we'll make a "
"new submodule in our package for dealing with, say, load balancers -- "
"``lb.py``::"
msgstr ""

#: ../usage/tasks.rst:348
msgid "And we'll add this to the top of ``__init__.py``::"
msgstr "我们再在 ``__init__.py`` 的顶部加上： ::"

#: ../usage/tasks.rst:352
msgid "Now ``fab --list`` shows us::"
msgstr "现在 ``fab --list`` 会显示： ::"

#: ../usage/tasks.rst:358
msgid ""
"Again, with only one task in its own submodule, it looks kind of silly, but "
"the benefits should be pretty obvious."
msgstr ""

#: ../usage/tasks.rst:362
msgid "Going deeper"
msgstr "深入了解"

#: ../usage/tasks.rst:364
msgid ""
"Namespacing isn't limited to just one level. Let's say we had a larger setup"
" and wanted a namespace for database related tasks, with additional "
"differentiation inside that. We make a sub-package named ``db/`` and inside "
"it, a ``migrations.py`` module::"
msgstr ""

#: ../usage/tasks.rst:377
msgid ""
"We need to make sure that this module is visible to anybody importing "
"``db``, so we add it to the sub-package's ``__init__.py``::"
msgstr ""

#: ../usage/tasks.rst:382
msgid ""
"As a final step, we import the sub-package into our root-level "
"``__init__.py``, so now its first few lines look like this::"
msgstr ""

#: ../usage/tasks.rst:388
msgid "After all that, our file tree looks like this::"
msgstr "这样之后文件的树形结构会变成这样： ::"

#: ../usage/tasks.rst:397
msgid "and ``fab --list`` shows::"
msgstr "``fab --list`` 会显示： ::"

#: ../usage/tasks.rst:405
msgid ""
"We could also have specified (or imported) tasks directly into "
"``db/__init__.py``, and they would show up as ``db.<whatever>`` as you might"
" expect."
msgstr ""

#: ../usage/tasks.rst:410
msgid "Limiting with ``__all__``"
msgstr "使用 ``__all__`` 加以限制"

#: ../usage/tasks.rst:412
msgid ""
"You may limit what Fabric \"sees\" when it examines imported modules, by "
"using the Python convention of a module level ``__all__`` variable (a list "
"of variable names.) If we didn't want the ``db.migrations.run`` task to show"
" up by default for some reason, we could add this to the top of "
"``db/migrations.py``::"
msgstr ""

#: ../usage/tasks.rst:419
msgid ""
"Note the lack of ``'run'`` there. You could, if needed, import ``run`` "
"directly into some other part of the hierarchy, but otherwise it'll remain "
"hidden."
msgstr ""

#: ../usage/tasks.rst:423
msgid "Switching it up"
msgstr "封装"

#: ../usage/tasks.rst:425
msgid ""
"We've been keeping our fabfile package neatly organized and importing it in "
"a straightforward manner, but the filesystem layout doesn't actually matter "
"here. All Fabric's loader cares about is the names the modules are given "
"when they're imported."
msgstr ""
"我们已经将 fabfile 库嵌套组织起来并直接引用，但是重要的并不是文件系统层级结构，"
"Fabric 的加载器只关心模块名和引用的时机。"

#: ../usage/tasks.rst:430
msgid ""
"For example, if we changed the top of our root ``__init__.py`` to look like "
"this::"
msgstr "例如，如果我们修改最顶层的 ``__init__.py`` 成这样： ::"

#: ../usage/tasks.rst:435
msgid "Our task list would change thusly::"
msgstr "任务列表会因此改变： ::"

#: ../usage/tasks.rst:443
msgid ""
"This applies to any other import -- you could import third party modules "
"into your own task hierarchy, or grab a deeply nested module and make it "
"appear near the top level."
msgstr ""

#: ../usage/tasks.rst:448
msgid "Nested list output"
msgstr "嵌套的列表输出"

#: ../usage/tasks.rst:450
msgid ""
"As a final note, we've been using the default Fabric :option:`--list <-l>` "
"output during this section -- it makes it more obvious what the actual task "
"names are. However, you can get a more nested or tree-like view by passing "
"``nested`` to the :option:`--list-format <-F>` option::"
msgstr ""

#: ../usage/tasks.rst:467
msgid ""
"While it slightly obfuscates the \"real\" task names, this view provides a "
"handy way of noting the organization of tasks in large namespaces."
msgstr ""

#: ../usage/tasks.rst:474
msgid "Classic tasks"
msgstr "传统任务"

#: ../usage/tasks.rst:476
msgid ""
"When no new-style `~fabric.tasks.Task`-based tasks are found, Fabric will "
"consider any callable object found in your fabfile, **except** the "
"following:"
msgstr ""

#: ../usage/tasks.rst:479
msgid ""
"Callables whose name starts with an underscore (``_``). In other words, "
"Python's usual \"private\" convention holds true here."
msgstr ""

#: ../usage/tasks.rst:481
msgid ""
"Callables defined within Fabric itself. Fabric's own functions such as "
"`~fabric.operations.run` and `~fabric.operations.sudo`  will not show up in "
"your task list."
msgstr ""

#: ../usage/tasks.rst:487
msgid "Imports"
msgstr "导入"

#: ../usage/tasks.rst:489
msgid ""
"Python's ``import`` statement effectively includes the imported objects in "
"your module's namespace. Since Fabric's fabfiles are just Python modules, "
"this means that imports are also considered as possible classic-style tasks,"
" alongside anything defined in the fabfile itself."
msgstr ""

#: ../usage/tasks.rst:495
msgid ""
"This only applies to imported *callable objects* -- not modules. Imported "
"modules only come into play if they contain :ref:`new-style tasks <new-"
"style-tasks>`, at which point this section no longer applies."
msgstr ""

#: ../usage/tasks.rst:500
msgid ""
"Because of this, we strongly recommend that you use the ``import module`` "
"form of importing, followed by ``module.callable()``, which will result in a"
" cleaner fabfile API than doing ``from module import callable``."
msgstr ""

#: ../usage/tasks.rst:504
msgid ""
"For example, here's a sample fabfile which uses ``urllib.urlopen`` to get "
"some data out of a webservice::"
msgstr "下面是一个使用 ``urllib.urlopen`` 从网络服务下载数据的 fabfile 的例子。"

#: ../usage/tasks.rst:515
msgid ""
"This looks simple enough, and will run without error. However, look what "
"happens if we run :option:`fab --list <-l>` on this fabfile::"
msgstr ""
"看起来这已经足够简单，并且没有错误。然而，如果在这个 fabfile 上运行 "
":option:`fab --list <-l>` 就会这样： ::"

#: ../usage/tasks.rst:524
msgid ""
"Our fabfile of only one task is showing two \"tasks\", which is bad enough, "
"and an unsuspecting user might accidentally try to call ``fab urlopen``, "
"which probably won't work very well. Imagine any real-world fabfile, which "
"is likely to be much more complex, and hopefully you can see how this could "
"get messy fast."
msgstr ""

#: ../usage/tasks.rst:530
msgid "For reference, here's the recommended way to do it::"
msgstr "作为参考，下面是推荐的使用方法： ::"

#: ../usage/tasks.rst:540
msgid ""
"It's a simple change, but it'll make anyone using your fabfile a bit "
"happier."
msgstr "这只是一个很小的变化，但能大幅改善 fabfile 的使用体验。"

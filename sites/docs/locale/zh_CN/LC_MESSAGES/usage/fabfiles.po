#
msgid ""
msgstr ""
"Project-Id-Version: Fabric\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../usage/fabfiles.rst:3
msgid "Fabfile construction and use"
msgstr "Fabfile 文件的结构和使用"

#: ../usage/fabfiles.rst:5
msgid ""
"This document contains miscellaneous sections about fabfiles, both how to "
"best write them, and how to use them once written."
msgstr ""
"本文档介绍了 fabfile 的使用，以及各式各样的 fabfile 示例，其中不乏最佳实践和反面教材。"

#: ../usage/fabfiles.rst:11
msgid "Fabfile discovery"
msgstr "指定 fabfile"

#: ../usage/fabfiles.rst:13
msgid ""
"Fabric is capable of loading Python modules (e.g. ``fabfile.py``) or "
"packages (e.g. a ``fabfile/`` directory containing an ``__init__.py``). By "
"default, it looks for something named (to Python's import machinery) "
"``fabfile`` - so either ``fabfile/`` or ``fabfile.py``."
msgstr ""
"Fabric 能够加载 Python 模块（如： ``fabfile.py`` ）和包（如 ``fabfile/`` ），"
"默认情况下，它会根据 Python 包的导入机制加载 ``fabfile`` －可以是 ``fabfile/`` "
"也可以是 ``fabfile.py`` 。"

#: ../usage/fabfiles.rst:18
msgid ""
"The fabfile discovery algorithm searches in the invoking user's current "
"working directory or any parent directories. Thus, it is oriented around "
"\"project\" use, where one keeps e.g. a ``fabfile.py`` at the root of a "
"source code tree. Such a fabfile will then be discovered no matter where in "
"the tree the user invokes ``fab``."
msgstr ""
"根据 fabfile 的搜寻机制，Fabric 会依次查找用户当前目录以及其上层目录，因此在项目中使用时，"
"可以把 ``fabfile.py`` 置于项目的根目录，这样无论进入项目中的任何目录时，"
"调用 ``fab`` 命令都可以找到这个 ``fabfile`` 配置。"

#: ../usage/fabfiles.rst:24
msgid ""
"The specific name to be searched for may be overridden on the command-line "
"with the :option:`-f` option, or by adding a :ref:`fabricrc <fabricrc>` line"
" which sets the value of ``fabfile``. For example, if you wanted to name "
"your fabfile ``fab_tasks.py``, you could create such a file and then call "
"``fab -f fab_tasks.py <task name>``, or add ``fabfile = fab_tasks.py`` to "
"``~/.fabricrc``."
msgstr ""
"你要可以在命令行中通过 :option:`-f` 参数，或者在 :ref:`fabricrc <fabricrc>` 中"
"指定 ``fabfile`` 文件名。例如，想要使用 ``fab_tasks.py`` 作为 fabfile 的文件名，"
"你只需要在创建它后输入 ``fab -f fab_tasks.py <task name>`` ，或者在 "
"``~/.fabricrc`` 中添加 ``fabfile = fab_tasks.py`` 。"

#: ../usage/fabfiles.rst:31
msgid ""
"If the given fabfile name contains path elements other than a filename (e.g."
" ``../fabfile.py`` or ``/dir1/dir2/custom_fabfile``) it will be treated as a"
" file path and directly checked for existence without any sort of searching."
" When in this mode, tilde-expansion will be applied, so one may refer to "
"e.g. ``~/personal_fabfile.py``."
msgstr ""
"如果指定的 fabfile 文件名中包含了路径元素（比如： ``../fabfile.py`` 或者 "
"``/dir1/dir2/custom_fabfile``），而不只是文件名，Fabric 将直接找到该文件，"
"不做任何搜索。这种情况下同样接受波浪线表达式，也就是说你可以这样指定： "
"``~/personal_fabfile.py`` 。"

#: ../usage/fabfiles.rst:39
msgid ""
"Fabric does a normal ``import`` (actually an ``__import__``) of your fabfile"
" in order to access its contents -- it does not do any ``eval``-ing or "
"similar. In order for this to work, Fabric temporarily adds the found "
"fabfile's containing folder to the Python load path (and removes it "
"immediately afterwards.)"
msgstr ""
"Fabric 通过 ``import`` （实际上是 ``__import__``）来获取配置文件内容——"
"而不是 ``eval`` 或者类似的方式。它的实现方式是，将 fabfile 所在目录加入 Python "
"的加载目录（当然之后会将它删去）。"

#: ../usage/fabfiles.rst:45
msgid "The ability to load package fabfiles."
msgstr "支持加载 fabfile 包。"

#: ../usage/fabfiles.rst:52
msgid "Importing Fabric"
msgstr "引用 Fabric"

#: ../usage/fabfiles.rst:54
msgid ""
"Because Fabric is just Python, you *can* import its components any way you "
"want. However, for the purposes of encapsulation and convenience (and to "
"make life easier for Fabric's packaging script) Fabric's public API is "
"maintained in the ``fabric.api`` module."
msgstr ""
"Fabric 本质上依然是 Python，因此你 *可以* 随意地调用它的组件。不过，处于封装和便捷性"
"（以及 Fabric 脚本的易用性）考虑，Fabric 的公开 API 由 ``fabric.api`` 模块维护。"

#: ../usage/fabfiles.rst:59
msgid ""
"All of Fabric's :doc:`../api/core/operations`, "
":doc:`../api/core/context_managers`, :doc:`../api/core/decorators` and "
":doc:`../api/core/utils` are included in this module as a single, flat "
"namespace. This enables a very simple and consistent interface to Fabric "
"within your fabfiles::"
msgstr ""
"Fabric 的 :doc:`../api/core/operations` 、:doc:`../api/core/context_managers` 、 "
":doc:`../api/core/decorators` 以及 :doc:`../api/core/utils` 都是本模块的"
"名字空间，为 fabfile 提供了一套简单并且统一的接口。你可以像这样使用： ::"

#: ../usage/fabfiles.rst:69
msgid ""
"This is not technically best practices (for `a number of reasons`_) and if "
"you're only using a couple of Fab API calls, it *is* probably a good idea to"
" explicitly ``from fabric.api import env, run`` or similar. However, in most"
" nontrivial fabfiles, you'll be using all or most of the API, and the star "
"import::"
msgstr ""
"严格来说，这样并不符合最佳实践（因为 `a number of reasons`_ ），如果你只需要使用"
"少数几个 Fab API，*务必* 明确导入： :: ``from fabric.api import env, run`` 。"
"但是在大多数 fabfile 中，都使用了其中大多数 API，这时 ``import *``"

#: ../usage/fabfiles.rst:77
msgid "will be a lot easier to write and read than::"
msgstr "比下面的写法要更易于读写： ::"

#: ../usage/fabfiles.rst:82
msgid "so in this case we feel pragmatism overrides best practices."
msgstr "在上面的例子中，相比最优范式，我们可以更加实用主义一些。"

#: ../usage/fabfiles.rst:88
msgid "Defining tasks and importing callables"
msgstr "定义任务并导入 callable 任务"

#: ../usage/fabfiles.rst:90
msgid ""
"For important information on what exactly Fabric will consider as a task "
"when it loads your fabfile, as well as notes on how best to import other "
"code, please see :doc:`/usage/tasks` in the :doc:`execution` documentation."
msgstr ""
"对于 Fabric 来说怎样才算是任务，以及 Fabric 何时导入 fabfile ，"
"请阅读 :doc:`execution` 文档的 :doc:`/usage/tasks` 章节。"

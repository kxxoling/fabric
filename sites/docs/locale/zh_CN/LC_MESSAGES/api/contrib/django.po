#
msgid ""
msgstr ""
"Project-Id-Version: Fabric\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../api/contrib/django.rst:3
msgid "Django Integration"
msgstr "与 Django 集成"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django:3
msgid ""
"These functions streamline the process of initializing Django's settings "
"module environment variable. Once this is done, your fabfile may import from"
" your Django project, or Django itself, without requiring the use of "
"``manage.py`` plugins or having to set the environment variable yourself "
"every time you use your fabfile."
msgstr ""
"这些函数提高了初始化 Django 配置中环境变量的效率，运行后即可从 Django 项目或者 Django 本身"
"中提取环境变量，而不需要每次使用 fabfile 时都亲自设置环境变量，或者使用 ``manage.py`` 插件。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django:9
msgid ""
"Currently, these functions only allow Fabric to interact with local-to-your-"
"fabfile Django installations. This is not as limiting as it sounds; for "
"example, you can use Fabric as a remote \"build\" tool as well as using it "
"locally. Imagine the following fabfile::"
msgstr ""
"目前，这些函数仅支持 Fabric 和 fabfile 以及它能引用到的 Django 库交互。"
"听起来限制了你的使用，其实不然。在下面的例子中，你可以像在本地一样使用 Fabric 作为"
"作为“构建”工具： ::"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django:29
msgid ""
"With Fabric installed on both ends, you could execute "
"``print_production_instances`` locally, which would trigger "
"``print_instances`` on the production server -- which would then be "
"interacting with your production Django database."
msgstr ""
"由于两边都安装了 Fabric，你在本地执行 ``print_production_instances`` 将在生产服务器上"
"触发 ``print_instances`` 函数，而它将会和远程环境中的 Django 数据库交互。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django:34
msgid ""
"As another example, if your local and remote settings are similar, you can "
"use it to obtain e.g. your database settings, and then use those when "
"executing a remote (non-Fabric) command. This would allow you some degree of"
" freedom even if Fabric is only installed locally::"
msgstr ""
"在下面这个例子中，如果本地和远程使用相同的 settings，那么你可以把数据库等设置放在 fabfile 中，"
"这样在远程（无 Fabric）命令中也能使用。这保证即使只有本地安装了 Fabric 也能灵活地使用： ::"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django:52
msgid ""
"The above snippet will work if run from a local, development environment, "
"again provided your local ``settings.py`` mirrors your remote one in terms "
"of database connection info."
msgstr ""
"上面的代码片段可以在本地开发环境运行，将本地的 ``settings.py`` 镜像到远程以共享数据库连接信息。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.project:1
msgid "Sets ``DJANGO_SETTINGS_MODULE`` to ``'<name>.settings'``."
msgstr "将 ``DJANGO_SETTINGS_MODULE`` 设置为 ``'<name>.settings'`` 。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.project:3
msgid ""
"This function provides a handy shortcut for the common case where one is "
"using the Django default naming convention for their settings file and "
"location."
msgstr ""
"该函数使用 Django 自带的 settings 文件或路径命名转换的功能提供了一个简便的常见问题解决方案。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.project:7
msgid ""
"Uses `settings_module` -- see its documentation for details on why and how "
"to use this functionality."
msgstr ""
"使用 `settings_module` —— 详细的使用和原理参见其文档。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.settings_module:1
msgid ""
"Set ``DJANGO_SETTINGS_MODULE`` shell environment variable to ``module``."
msgstr "将 ``DJANGO_SETTINGS_MODULE`` 控制台环境变量设置为 ``module`` 。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.settings_module:3
msgid ""
"Due to how Django works, imports from Django or a Django project will fail "
"unless the shell environment variable ``DJANGO_SETTINGS_MODULE`` is "
"correctly set (see `the Django settings docs "
"<http://docs.djangoproject.com/en/dev/topics/settings/>`_.)"
msgstr ""
"由于 Django 的工作原理所限，从 Django 或者 Django 项目中导入对象必须保证 "
" ``DJANGO_SETTINGS_MODULE`` 设置正确（参见 `Django 设置文档 "
"<http://docs.djangoproject.com/en/dev/topics/settings/>`_ ）。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.settings_module:8
msgid ""
"This function provides a shortcut for doing so; call it near the top of your"
" fabfile or Fabric-using code, after which point any Django imports should "
"work correctly."
msgstr ""
"这个函数提供了一个简易的写法，只需要在 fabfile 或者 Fabric 调用的文件中调用它，"
"之后从 Django 引用对象时便不再有问题。"

#: ../../../../../../usr/local/lib/python2.7/site-packages/fabric/contrib/django.pydocstring
#: of fabric.contrib.django.settings_module:14
msgid ""
"This function sets a **shell** environment variable (via ``os.environ``) and"
" is unrelated to Fabric's own internal \"env\" variables."
msgstr ""
"本函数通过修改 ``os.environ`` 来修改 **shell** 环境变量，并不会对 Fabric 的 ``env`` "
"带来任何影响。"

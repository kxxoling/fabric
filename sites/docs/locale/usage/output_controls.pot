# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../usage/output_controls.rst:3
msgid "Managing output"
msgstr ""

#: ../usage/output_controls.rst:5
msgid "The ``fab`` tool is very verbose by default and prints out almost everything it can, including the remote end's stderr and stdout streams, the command strings being executed, and so forth. While this is necessary in many cases in order to know just what's going on, any nontrivial Fabric task will quickly become difficult to follow as it runs."
msgstr ""

#: ../usage/output_controls.rst:13
msgid "Output levels"
msgstr ""

#: ../usage/output_controls.rst:15
msgid "To aid in organizing task output, Fabric output is grouped into a number of non-overlapping levels or groups, each of which may be turned on or off independently. This provides flexible control over what is displayed to the user."
msgstr ""

#: ../usage/output_controls.rst:22
msgid "All levels, save for ``debug`` and ``exceptions``, are on by default."
msgstr ""

#: ../usage/output_controls.rst:25
msgid "Standard output levels"
msgstr ""

#: ../usage/output_controls.rst:27
msgid "The standard, atomic output levels/groups are as follows:"
msgstr ""

#: ../usage/output_controls.rst:29
msgid "**status**: Status messages, i.e. noting when Fabric is done running, if the user used a keyboard interrupt, or when servers are disconnected from. These messages are almost always relevant and rarely verbose."
msgstr ""

#: ../usage/output_controls.rst:33
msgid "**aborts**: Abort messages. Like status messages, these should really only be turned off when using Fabric as a library, and possibly not even then. Note that even if this output group is turned off, aborts will still occur -- there just won't be any output about why Fabric aborted!"
msgstr ""

#: ../usage/output_controls.rst:38
msgid "**warnings**: Warning messages. These are often turned off when one expects a given operation to fail, such as when using ``grep`` to test existence of text in a file. If paired with setting ``env.warn_only`` to True, this can result in fully silent warnings when remote programs fail. As with ``aborts``, this setting does not control actual warning behavior, only whether warning messages are printed or hidden."
msgstr ""

#: ../usage/output_controls.rst:45
msgid "**running**: Printouts of commands being executed or files transferred, e.g. ``[myserver] run: ls /var/www``. Also controls printing of tasks being run, e.g. ``[myserver] Executing task 'foo'``."
msgstr ""

#: ../usage/output_controls.rst:49
msgid "**stdout**: Local, or remote, stdout, i.e. non-error output from commands."
msgstr ""

#: ../usage/output_controls.rst:51
msgid "**stderr**: Local, or remote, stderr, i.e. error-related output from commands."
msgstr ""

#: ../usage/output_controls.rst:53
msgid "**user**: User-generated output, i.e. local output printed by fabfile code via use of the `~fabric.utils.fastprint` or `~fabric.utils.puts` functions."
msgstr ""

#: ../usage/output_controls.rst:56
msgid "Added \"Executing task\" lines to the ``running`` output level."
msgstr ""

#: ../usage/output_controls.rst:59
msgid "Added the ``user`` output level."
msgstr ""

#: ../usage/output_controls.rst:63
msgid "Debug output"
msgstr ""

#: ../usage/output_controls.rst:65
msgid "There are two more atomic output levels for use when troubleshooting: ``debug``, which behaves slightly differently from the rest, and ``exceptions``, whose behavior is included in ``debug`` but may be enabled separately."
msgstr ""

#: ../usage/output_controls.rst:70
msgid "**debug**: Turn on debugging (which is off by default.) Currently, this is largely used to view the \"full\" commands being run; take for example this `~fabric.operations.run` call::"
msgstr ""

#: ../usage/output_controls.rst:76
msgid "Normally, the ``running`` line will show exactly what is passed into `~fabric.operations.run`, like so::"
msgstr ""

#: ../usage/output_controls.rst:81
msgid "With ``debug`` on, and assuming you've left :ref:`shell` set to ``True``, you will see the literal, full string as passed to the remote server::"
msgstr ""

#: ../usage/output_controls.rst:86
msgid "Enabling ``debug`` output will also display full Python tracebacks during aborts (as if ``exceptions`` output was enabled)."
msgstr ""

#: ../usage/output_controls.rst:91
msgid "Where modifying other pieces of output (such as in the above example where it modifies the 'running' line to show the shell and any escape characters), this setting takes precedence over the others; so if ``running`` is False but ``debug`` is True, you will still be shown the 'running' line in its debugging form."
msgstr ""

#: ../usage/output_controls.rst:97
msgid "**exceptions**: Enables display of tracebacks when exceptions occur; intended for use when ``debug`` is set to ``False`` but one is still interested in detailed error info."
msgstr ""

#: ../usage/output_controls.rst:101
msgid "Debug output now includes full Python tracebacks during aborts."
msgstr ""

#: ../usage/output_controls.rst:104
msgid "Added the ``exceptions`` output level."
msgstr ""

#: ../usage/output_controls.rst:110
msgid "Output level aliases"
msgstr ""

#: ../usage/output_controls.rst:112
msgid "In addition to the atomic/standalone levels above, Fabric also provides a couple of convenience aliases which map to multiple other levels. These may be referenced anywhere the other levels are referenced, and will effectively toggle all of the levels they are mapped to."
msgstr ""

#: ../usage/output_controls.rst:117
msgid "**output**: Maps to both ``stdout`` and ``stderr``. Useful for when you only care to see the 'running' lines and your own print statements (and warnings)."
msgstr ""

#: ../usage/output_controls.rst:120
msgid "**everything**: Includes ``warnings``, ``running``, ``user`` and ``output`` (see above.) Thus, when turning off ``everything``, you will only see a bare minimum of output (just ``status`` and ``debug`` if it's on), along with your own print statements."
msgstr ""

#: ../usage/output_controls.rst:125
msgid "**commands**: Includes ``stdout`` and ``running``. Good for hiding non-erroring commands entirely, while still displaying any stderr output."
msgstr ""

#: ../usage/output_controls.rst:128
msgid "Added the ``commands`` output alias."
msgstr ""

#: ../usage/output_controls.rst:133
msgid "Hiding and/or showing output levels"
msgstr ""

#: ../usage/output_controls.rst:135
msgid "You may toggle any of Fabric's output levels in a number of ways; for examples, please see the API docs linked in each bullet point:"
msgstr ""

#: ../usage/output_controls.rst:138
msgid "**Direct modification of fabric.state.output**: `fabric.state.output` is a dictionary subclass (similar to :doc:`env <env>`) whose keys are the output level names, and whose values are either True (show that particular type of output) or False (hide it.)"
msgstr ""

#: ../usage/output_controls.rst:143
msgid "`fabric.state.output` is the lowest-level implementation of output levels and is what Fabric's internals reference when deciding whether or not to print their output."
msgstr ""

#: ../usage/output_controls.rst:147
msgid "**Context managers**: `~fabric.context_managers.hide` and `~fabric.context_managers.show` are twin context managers that take one or more output level names as strings, and either hide or show them within the wrapped block. As with Fabric's other context managers, the prior values are restored when the block exits."
msgstr ""

#: ../usage/output_controls.rst:155
msgid "`~fabric.context_managers.settings`, which can nest calls to `~fabric.context_managers.hide` and/or `~fabric.context_managers.show` inside itself."
msgstr ""

#: ../usage/output_controls.rst:159
msgid "**Command-line arguments**: You may use the :option:`--hide` and/or :option:`--show` arguments to :doc:`fab`, which behave exactly like the context managers of the same names (but are, naturally, globally applied) and take comma-separated strings as input."
msgstr ""


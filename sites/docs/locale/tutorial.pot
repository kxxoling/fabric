# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015 Jeff Forcier
# This file is distributed under the same license as the Fabric package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Fabric \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-06-16 16:34+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../tutorial.rst:3
msgid "Overview and Tutorial"
msgstr ""

#: ../tutorial.rst:5
msgid "Welcome to Fabric!"
msgstr ""

#: ../tutorial.rst:7
msgid "This document is a whirlwind tour of Fabric's features and a quick guide to its use. Additional documentation (which is linked to throughout) can be found in the :ref:`usage documentation <usage-docs>` -- please make sure to check it out."
msgstr ""

#: ../tutorial.rst:13
msgid "What is Fabric?"
msgstr ""

#: ../tutorial.rst:15
msgid "As the ``README`` says:"
msgstr ""

#: ../../../README.rst:1
msgid "Fabric is a Python (2.5-2.7) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks."
msgstr ""

#: ../tutorial.rst:20
msgid "More specifically, Fabric is:"
msgstr ""

#: ../tutorial.rst:22
msgid "A tool that lets you execute **arbitrary Python functions** via the **command line**;"
msgstr ""

#: ../tutorial.rst:24
msgid "A library of subroutines (built on top of a lower-level library) to make executing shell commands over SSH **easy** and **Pythonic**."
msgstr ""

#: ../tutorial.rst:27
msgid "Naturally, most users combine these two things, using Fabric to write and execute Python functions, or **tasks**, to automate interactions with remote servers. Let's take a look."
msgstr ""

#: ../tutorial.rst:33
msgid "Hello, ``fab``"
msgstr ""

#: ../tutorial.rst:35
msgid "This wouldn't be a proper tutorial without \"the usual\"::"
msgstr ""

#: ../tutorial.rst:40
msgid "Placed in a Python module file named ``fabfile.py`` in your current working directory, that ``hello`` function can be executed with the ``fab`` tool (installed as part of Fabric) and does just what you'd expect::"
msgstr ""

#: ../tutorial.rst:49
msgid "That's all there is to it. This functionality allows Fabric to be used as a (very) basic build tool even without importing any of its API."
msgstr ""

#: ../tutorial.rst:54
msgid "The ``fab`` tool simply imports your fabfile and executes the function or functions you instruct it to. There's nothing magic about it -- anything you can do in a normal Python script can be done in a fabfile!"
msgstr ""

#: ../tutorial.rst:58
msgid ":ref:`execution-strategy`, :doc:`/usage/tasks`, :doc:`/usage/fab`"
msgstr ""

#: ../tutorial.rst:62
msgid "Task arguments"
msgstr ""

#: ../tutorial.rst:64
msgid "It's often useful to pass runtime parameters into your tasks, just as you might during regular Python programming. Fabric has basic support for this using a shell-compatible notation: ``<task name>:<arg>,<kwarg>=<value>,...``. It's contrived, but let's extend the above example to say hello to you personally::"
msgstr ""

#: ../tutorial.rst:72
msgid "By default, calling ``fab hello`` will still behave as it did before; but now we can personalize it::"
msgstr ""

#: ../tutorial.rst:80
msgid "Those already used to programming in Python might have guessed that this invocation behaves exactly the same way::"
msgstr ""

#: ../tutorial.rst:88
msgid "For the time being, your argument values will always show up in Python as strings and may require a bit of string manipulation for complex types such as lists. Future versions may add a typecasting system to make this easier."
msgstr ""

#: ../tutorial.rst:92
msgid ":ref:`task-arguments`"
msgstr ""

#: ../tutorial.rst:95
msgid "Local commands"
msgstr ""

#: ../tutorial.rst:97
msgid "As used above, ``fab`` only really saves a couple lines of ``if __name__ == \"__main__\"`` boilerplate. It's mostly designed for use with Fabric's API, which contains functions (or **operations**) for executing shell commands, transferring files, and so forth."
msgstr ""

#: ../tutorial.rst:102
msgid "Let's build a hypothetical Web application fabfile. This example scenario is as follows: The Web application is managed via Git on a remote host ``vcshost``. On ``localhost``, we have a local clone of said Web application. When we push changes back to ``vcshost``, we want to be able to immediately install these changes on a remote host ``my_server`` in an automated fashion. We will do this by automating the local and remote Git commands."
msgstr ""

#: ../tutorial.rst:109
msgid "Fabfiles usually work best at the root of a project::"
msgstr ""

#: ../tutorial.rst:127
msgid "We're using a Django application here, but only as an example -- Fabric is not tied to any external codebase, save for its SSH library."
msgstr ""

#: ../tutorial.rst:130
msgid "For starters, perhaps we want to run our tests and commit to our VCS so we're ready for a deploy::"
msgstr ""

#: ../tutorial.rst:140
msgid "The output of which might look a bit like this::"
msgstr ""

#: ../tutorial.rst:164
msgid "The code itself is straightforward: import a Fabric API function, `~fabric.operations.local`, and use it to run and interact with local shell commands. The rest of Fabric's API is similar -- it's all just Python."
msgstr ""

#: ../tutorial.rst:168
msgid ":doc:`api/core/operations`, :ref:`fabfile-discovery`"
msgstr ""

#: ../tutorial.rst:172
msgid "Organize it your way"
msgstr ""

#: ../tutorial.rst:174
msgid "Because Fabric is \"just Python\" you're free to organize your fabfile any way you want. For example, it's often useful to start splitting things up into subtasks::"
msgstr ""

#: ../tutorial.rst:194
msgid "The ``prepare_deploy`` task can be called just as before, but now you can make a more granular call to one of the sub-tasks, if desired."
msgstr ""

#: ../tutorial.rst:199
msgid "Failure"
msgstr ""

#: ../tutorial.rst:201
msgid "Our base case works fine now, but what happens if our tests fail?  Chances are we want to put on the brakes and fix them before deploying."
msgstr ""

#: ../tutorial.rst:204
msgid "Fabric checks the return value of programs called via operations and will abort if they didn't exit cleanly. Let's see what happens if one of our tests encounters an error::"
msgstr ""

#: ../tutorial.rst:230
msgid "Great! We didn't have to do anything ourselves: Fabric detected the failure and aborted, never running the ``commit`` task."
msgstr ""

#: ../tutorial.rst:233
msgid ":ref:`Failure handling (usage documentation) <failures>`"
msgstr ""

#: ../tutorial.rst:236
msgid "Failure handling"
msgstr ""

#: ../tutorial.rst:238
msgid "But what if we wanted to be flexible and give the user a choice? A setting (or **environment variable**, usually shortened to **env var**) called :ref:`warn_only` lets you turn aborts into warnings, allowing flexible error handling to occur."
msgstr ""

#: ../tutorial.rst:243
msgid "Let's flip this setting on for our ``test`` function, and then inspect the result of the `~fabric.operations.local` call ourselves::"
msgstr ""

#: ../tutorial.rst:258
msgid "In adding this new feature we've introduced a number of new things:"
msgstr ""

#: ../tutorial.rst:260
msgid "The ``__future__`` import required to use ``with:`` in Python 2.5;"
msgstr ""

#: ../tutorial.rst:261
msgid "Fabric's `contrib.console <fabric.contrib.console>` submodule, containing the `~fabric.contrib.console.confirm` function, used for simple yes/no prompts;"
msgstr ""

#: ../tutorial.rst:263
msgid "The `~fabric.context_managers.settings` context manager, used to apply settings to a specific block of code;"
msgstr ""

#: ../tutorial.rst:265
msgid "Command-running operations like `~fabric.operations.local` can return objects containing info about their result (such as ``.failed``, or ``.return_code``);"
msgstr ""

#: ../tutorial.rst:268
msgid "And the `~fabric.utils.abort` function, used to manually abort execution."
msgstr ""

#: ../tutorial.rst:270
msgid "However, despite the additional complexity, it's still pretty easy to follow, and is now much more flexible."
msgstr ""

#: ../tutorial.rst:273
msgid ":doc:`api/core/context_managers`, :ref:`env-vars`"
msgstr ""

#: ../tutorial.rst:277
msgid "Making connections"
msgstr ""

#: ../tutorial.rst:279
msgid "Let's start wrapping up our fabfile by putting in the keystone: a ``deploy`` task that is destined to run on one or more remote server(s), and ensures the code is up to date::"
msgstr ""

#: ../tutorial.rst:289
msgid "Here again, we introduce a handful of new concepts:"
msgstr ""

#: ../tutorial.rst:291
msgid "Fabric is just Python -- so we can make liberal use of regular Python code constructs such as variables and string interpolation;"
msgstr ""

#: ../tutorial.rst:293
msgid "`~fabric.context_managers.cd`, an easy way of prefixing commands with a ``cd /to/some/directory`` call. This is similar to  `~fabric.context_managers.lcd` which does the same locally."
msgstr ""

#: ../tutorial.rst:296
msgid "`~fabric.operations.run`, which is similar to `~fabric.operations.local` but runs **remotely** instead of locally."
msgstr ""

#: ../tutorial.rst:299
msgid "We also need to make sure we import the new functions at the top of our file::"
msgstr ""

#: ../tutorial.rst:305
msgid "With these changes in place, let's deploy::"
msgstr ""

#: ../tutorial.rst:316
msgid "We never specified any connection info in our fabfile, so Fabric doesn't know on which host(s) the remote command should be executed. When this happens, Fabric prompts us at runtime. Connection definitions use SSH-like \"host strings\" (e.g. ``user@host:port``) and will use your local username as a default -- so in this example, we just had to specify the hostname, ``my_server``."
msgstr ""

#: ../tutorial.rst:325
msgid "Remote interactivity"
msgstr ""

#: ../tutorial.rst:327
msgid "``git pull`` works fine if you've already got a checkout of your source code -- but what if this is the first deploy? It'd be nice to handle that case too and do the initial ``git clone``::"
msgstr ""

#: ../tutorial.rst:340
msgid "As with our calls to `~fabric.operations.local` above, `~fabric.operations.run` also lets us construct clean Python-level logic based on executed shell commands. However, the interesting part here is the ``git clone`` call: since we're using Git's SSH method of accessing the repository on our Git server, this means our remote `~fabric.operations.run` call will need to authenticate itself."
msgstr ""

#: ../tutorial.rst:347
msgid "Older versions of Fabric (and similar high level SSH libraries) run remote programs in limbo, unable to be touched from the local end. This is problematic when you have a serious need to enter passwords or otherwise interact with the remote program."
msgstr ""

#: ../tutorial.rst:352
msgid "Fabric 1.0 and later breaks down this wall and ensures you can always talk to the other side. Let's see what happens when we run our updated ``deploy`` task on a new server with no Git checkout::"
msgstr ""

#: ../tutorial.rst:378
msgid "Notice the ``Password:`` prompt -- that was our remote ``git`` call on our Web server, asking for the password to the Git server. We were able to type it in and the clone continued normally."
msgstr ""

#: ../tutorial.rst:380
msgid ":doc:`/usage/interactivity`"
msgstr ""

#: ../tutorial.rst:386
msgid "Defining connections beforehand"
msgstr ""

#: ../tutorial.rst:388
msgid "Specifying connection info at runtime gets old real fast, so Fabric provides a handful of ways to do it in your fabfile or on the command line. We won't cover all of them here, but we will show you the most common one: setting the global host list, :ref:`env.hosts <hosts>`."
msgstr ""

#: ../tutorial.rst:393
msgid ":doc:`env <usage/env>` is a global dictionary-like object driving many of Fabric's settings, and can be written to with attributes as well (in fact, `~fabric.context_managers.settings`, seen above, is simply a wrapper for this.) Thus, we can modify it at module level near the top of our fabfile like so::"
msgstr ""

#: ../tutorial.rst:407
msgid "When ``fab`` loads up our fabfile, our modification of ``env`` will execute, storing our settings change. The end result is exactly as above: our ``deploy`` task will run against the ``my_server`` server."
msgstr ""

#: ../tutorial.rst:411
msgid "This is also how you can tell Fabric to run on multiple remote systems at once: because ``env.hosts`` is a list, ``fab`` iterates over it, calling the given task once for each connection."
msgstr ""

#: ../tutorial.rst:415
msgid ":doc:`usage/env`, :ref:`host-lists`"
msgstr ""

#: ../tutorial.rst:419
msgid "Conclusion"
msgstr ""

#: ../tutorial.rst:421
msgid "Our completed fabfile is still pretty short, as such things go. Here it is in its entirety::"
msgstr ""

#: ../tutorial.rst:456
msgid "This fabfile makes use of a large portion of Fabric's feature set:"
msgstr ""

#: ../tutorial.rst:458
msgid "defining fabfile tasks and running them with :doc:`fab <usage/fab>`;"
msgstr ""

#: ../tutorial.rst:459
msgid "calling local shell commands with `~fabric.operations.local`;"
msgstr ""

#: ../tutorial.rst:460
msgid "modifying env vars with `~fabric.context_managers.settings`;"
msgstr ""

#: ../tutorial.rst:461
msgid "handling command failures, prompting the user, and manually aborting;"
msgstr ""

#: ../tutorial.rst:462
msgid "and defining host lists and `~fabric.operations.run`-ning remote commands."
msgstr ""

#: ../tutorial.rst:464
msgid "However, there's still a lot more we haven't covered here! Please make sure you follow the various \"see also\" links, and check out the documentation table of contents on :doc:`the main index page <index>`."
msgstr ""

#: ../tutorial.rst:468
msgid "Thanks for reading!"
msgstr ""

